From 9f0ae12bb027d71a018d9b3f5a3f27b8b09ced1c Mon Sep 17 00:00:00 2001
From: Quan Xu <quan.xu@intel.com>
Date: Tue, 5 Jul 2016 10:07:04 +0800
Subject: [PATCH 24/36] vtpmmgr: fix stubdom/vtpmmgr/disk_format.h

Signed-off-by: Quan Xu <quan.xu@intel.com>
---
 stubdom/vtpmmgr/disk_format.h | 144 +++++++++++++++++++++---------------------
 1 file changed, 71 insertions(+), 73 deletions(-)

diff --git a/stubdom/vtpmmgr/disk_format.h b/stubdom/vtpmmgr/disk_format.h
index bc20fbb..2b19c37 100644
--- a/stubdom/vtpmmgr/disk_format.h
+++ b/stubdom/vtpmmgr/disk_format.h
@@ -2,30 +2,31 @@
 #define __VTPMMGR_DISK_FORMAT_H
 
 static const uint8_t TPM_MGR_MAGIC[12] = {
-	'T','P','M',0xfe,'M','G','R',0xdd,'D','O','M',0x00
+    'T','P','M',0xfe,'M','G','R',0xdd,'D','O','M',0x00
 };
 
 /**
  * Sector 0 on disk: stored in plaintext
  */
 struct disk_header {
-	char magic[12];
+    char magic[12];
 #define TPM_MGR_VERSION 0
-	be32_t version;
+    be32_t version;
 };
 
 /**
- * Raw contents of disk sectors that need both encryption and authentication
+ * Raw contents of disk sectors that need both encryption and
+ * authentication
  */
 struct disk_crypt_sector_plain {
-	struct mac128 mac;
-	union {
-		struct {
-			uint8_t iv[16];
-			char data[4096-32];
-		};
-		uint8_t iv_data[4096-16];
-	};
+    struct mac128 mac;
+    union {
+        struct {
+            uint8_t iv[16];
+            char data[4096-32];
+        };
+        uint8_t iv_data[4096-16];
+    };
 };
 
 /**
@@ -33,16 +34,16 @@ struct disk_crypt_sector_plain {
  */
 struct disk_root_sealed_data {
 #define DISK_ROOT_BOUND_MAGIC "Root"
-	char magic[4];
-	uuid_t tpm_manager_uuid;
+    char magic[4];
+    uuid_t tpm_manager_uuid;
 
-	be32_t nvram_slot;
-	struct tpm_authdata nvram_auth;
-	be32_t counter_index;
-	struct tpm_authdata counter_auth;
+    be32_t nvram_slot;
+    be32_t counter_index;
+    struct tpm_authdata nvram_auth;
+    struct tpm_authdata counter_auth;
 
-	/* encrypted (AES-ECB) with key from NVRAM */
-	struct key128 tm_key;
+    /* encrypted (AES-ECB) with key from NVRAM */
+    struct key128 tm_key;
 };
 
 /**
@@ -50,42 +51,41 @@ struct disk_root_sealed_data {
  */
 struct disk_group_sealed_data {
 #define DISK_GROUP_BOUND_MAGIC "TGrp"
-	char magic[4];
-	uuid_t tpm_manager_uuid;
-	struct tpm_authdata aik_authdata;
+    char magic[4];
+    uuid_t tpm_manager_uuid;
+    struct tpm_authdata aik_authdata;
 
-	struct key128 group_key;
-	struct key128 rollback_mac_key;
+    struct key128 group_key;
+    struct key128 rollback_mac_key;
 };
 
 /**
  * Contents of the seal_list_N sectors on disk (plaintext, linked list)
- *
  * The hdr field is unused except in sector 0
  */
 struct disk_seal_list {
-	struct disk_header hdr;
-	be32_t length;
-	sector_t next;
+    struct disk_header hdr;
+    be32_t length;
+    sector_t next;
 #define SEALS_PER_ROOT_SEAL_LIST 13
-	struct disk_seal_entry entry[SEALS_PER_ROOT_SEAL_LIST];
+    struct disk_seal_entry entry[SEALS_PER_ROOT_SEAL_LIST];
 };
 
 /**
  * TODO - overflow for struct disk_group_boot_config_list
  */
 struct disk_group_seal_list {
-	sector_t next;
+    sector_t next;
 #define SEALS_PER_GROUP_SEAL_LIST 13
-	struct disk_seal_entry entry[SEALS_PER_GROUP_SEAL_LIST];
+    struct disk_seal_entry entry[SEALS_PER_GROUP_SEAL_LIST];
 };
 
 /**
  * Rollback detection MAC entry
  */
 struct disk_rb_mac_entry {
-	be32_t id;
-	struct mac128 mac;
+    be32_t id;
+    struct mac128 mac;
 };
 
 #define NR_ENTRIES_PER_ROOT 16
@@ -93,31 +93,31 @@ struct disk_rb_mac_entry {
  * The area of the root sector protected by rollback MACs
  */
 struct disk_root_sector_mac1_area {
-	be64_t sequence;
-	be32_t tpm_counter_value;
+    be64_t sequence;
+    be32_t tpm_counter_value;
 
-	be32_t nr_groups;
-	struct hash256 group_hash[NR_ENTRIES_PER_ROOT];
+    be32_t nr_groups;
+    struct hash256 group_hash[NR_ENTRIES_PER_ROOT];
 };
 
 /**
  * Decrypted contents of the root sector (sector 1 and 2) on disk
  */
 struct disk_root_sector {
-	struct disk_root_sector_mac1_area v;
+    struct disk_root_sector_mac1_area v;
 
-	sector_t group_loc[NR_ENTRIES_PER_ROOT];
+    sector_t group_loc[NR_ENTRIES_PER_ROOT];
 
-	uint8_t pad[8];
+    uint8_t pad[8];
 
-	/* Rollback detection MACs */
-	be32_t nr_rb_macs;
-	sector_t rb_next_loc;
-	/* used if rb_macs overflows */
-	struct hash256 rb_next_hash;
+    /* Rollback detection MACs */
+    be32_t nr_rb_macs;
+    sector_t rb_next_loc;
+    /* used if rb_macs overflows */
+    struct hash256 rb_next_hash;
 
 #define NR_RB_MACS_PER_ROOT 128
-	struct disk_rb_mac_entry rb_macs[NR_RB_MACS_PER_ROOT];
+    struct disk_rb_mac_entry rb_macs[NR_RB_MACS_PER_ROOT];
 };
 
 /**
@@ -126,10 +126,10 @@ struct disk_root_sector {
  */
 struct disk_itree_sector {
 #define NR_ENTRIES_PER_ITREE 112
-	sector_t location[NR_ENTRIES_PER_ITREE];
-	/* SECTOR-HASH { */
-	struct hash256 hash[NR_ENTRIES_PER_ITREE];
-	/* SECTOR-HASH } */
+    sector_t location[NR_ENTRIES_PER_ITREE];
+    /* SECTOR-HASH { */
+    struct hash256 hash[NR_ENTRIES_PER_ITREE];
+    /* SECTOR-HASH } */
 };
 
 #define NR_ENTRIES_PER_GROUP_BASE 16
@@ -137,44 +137,43 @@ struct disk_itree_sector {
  * Data that must remain constant if a group is not open
  */
 struct disk_group_sector_mac3_area {
-	struct group_id_data id_data; /* MAC2 */
-	struct group_details details;
-	struct disk_group_boot_config_list boot_configs;
+    struct group_id_data id_data; /* MAC2 */
+    struct group_details details;
+    struct disk_group_boot_config_list boot_configs;
 
-	be32_t nr_vtpms;
-	struct hash256 vtpm_hash[NR_ENTRIES_PER_GROUP_BASE];
+    be32_t nr_vtpms;
+    struct hash256 vtpm_hash[NR_ENTRIES_PER_GROUP_BASE];
 };
 
 /**
  * Group metadata sector
- *
  * Encrypted with TM_KEY - takes 16 bytes for IV; integrity from parent.
  */
 struct disk_group_sector {
-	/* SECTOR-HASH { */
-	struct disk_group_sector_mac3_area v;
+    /* SECTOR-HASH { */
+    struct disk_group_sector_mac3_area v;
 
-	/* MAC(MAC3, group_key) */
-	struct mac128 group_mac;
-	/* SECTOR-HASH } */
+    /* MAC(MAC3, group_key) */
+    struct mac128 group_mac;
+    /* SECTOR-HASH } */
 
-	sector_t vtpm_location[NR_ENTRIES_PER_GROUP_BASE];
-	sector_t boot_configs_next;
+    sector_t vtpm_location[NR_ENTRIES_PER_GROUP_BASE];
+    sector_t boot_configs_next;
 };
 
 /**
  * Data on a vTPM which is available when its group is not open
  */
 struct disk_vtpm_plain {
-	uuid_t uuid;
-	be32_t flags;
+    uuid_t uuid;
+    be32_t flags;
 };
 
 /**
  * Data on a vTPM which is only available when its group is open
  */
 struct disk_vtpm_secret {
-	uint8_t data[64];
+    uint8_t data[64];
 };
 
 /**
@@ -183,11 +182,10 @@ struct disk_vtpm_secret {
  * Encrypted with TM_KEY - takes 16 bytes for IV
  */
 struct disk_vtpm_sector {
-	/* SECTOR-HASH { */
-	struct disk_vtpm_plain header[VTPMS_PER_SECTOR];
-	struct mac128 iv;
-	struct disk_vtpm_secret data[VTPMS_PER_SECTOR];
-	/* SECTOR-HASH } */
+    /* SECTOR-HASH { */
+    struct disk_vtpm_plain header[VTPMS_PER_SECTOR];
+    struct mac128 iv;
+    struct disk_vtpm_secret data[VTPMS_PER_SECTOR];
+    /* SECTOR-HASH } */
 };
-
 #endif
-- 
1.9.1

